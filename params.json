{"name":"Ling","tagline":"Language Savant. If your repository's language is being reported incorrectly, send us a pull request!","body":"### \r\n***\r\n# Linguist\r\n\r\nWe use this library at GitHub to detect blob languages, highlight code, ignore binary files, suppress generated files in diffs, and generate language breakdown graphs.\r\n\r\n## Features\r\n\r\n### Language detection\r\n\r\nLinguist defines a list of all languages known to GitHub in a [yaml file](https://github.com/github/linguist/blob/master/lib/linguist/languages.yml). In order for a file to be highlighted, a language and a lexer must be defined there.\r\n\r\nMost languages are detected by their file extension. For disambiguating between files with common extensions, we first apply some common-sense heuristics to pick out obvious languages. After that, we use a\r\n[statistical\r\nclassifier](https://github.com/github/linguist/blob/master/lib/linguist/classifier.rb).\r\nThis process can help us tell the difference between, for example, `.h` files which could be either C, C++, or Obj-C.\r\n\r\n```ruby\r\n\r\nLinguist::FileBlob.new(\"lib/linguist.rb\").language.name #=> \"Ruby\"\r\n\r\nLinguist::FileBlob.new(\"bin/linguist\").language.name #=> \"Ruby\"\r\n```\r\n\r\nSee [lib/linguist/language.rb](https://github.com/github/linguist/blob/master/lib/linguist/language.rb) and [lib/linguist/languages.yml](https://github.com/github/linguist/blob/master/lib/linguist/languages.yml).\r\n\r\n### Syntax Highlighting\r\n\r\nThe actual syntax highlighting is handled by our Pygments wrapper, [pygments.rb](https://github.com/tmm1/pygments.rb). It also provides a [Lexer abstraction](https://github.com/tmm1/pygments.rb/blob/master/lib/pygments/lexer.rb) that determines which highlighter should be used on a file.\r\n\r\n### Stats\r\n\r\nThe Language stats bar that you see on every repository is built by aggregating the languages of each file in that repository. The top language in the graph determines the project's primary language.\r\n\r\nThe repository stats API, accessed through `#languages`, can be used on a directory:\r\n\r\n```ruby\r\nproject = Linguist::Repository.from_directory(\".\")\r\nproject.language.name  #=> \"Ruby\"\r\nproject.languages      #=> { \"Ruby\" => 0.98, \"Shell\" => 0.02 }\r\n```\r\n\r\nThese stats are also printed out by the `linguist` binary. You can use the\r\n`--breakdown` flag, and the binary will also output the breakdown of files by language.\r\n\r\nYou can try running `linguist` on the `lib/` directory in this repository itself:\r\n\r\n    $ bundle exec linguist lib/ --breakdown\r\n\r\n    100.00% Ruby\r\n\r\n    Ruby:\r\n    linguist/blob_helper.rb\r\n    linguist/classifier.rb\r\n    linguist/file_blob.rb\r\n    linguist/generated.rb\r\n    linguist/heuristics.rb\r\n    linguist/language.rb\r\n    linguist/md5.rb\r\n    linguist/repository.rb\r\n    linguist/samples.rb\r\n    linguist/tokenizer.rb\r\n    linguist.rb\r\n\r\n#### Ignore vendored files\r\n\r\nChecking other code into your git repo is a common practice. But this often inflates your project's language stats and may even cause your project to be labeled as another language. We are able to identify some of these files and directories and exclude them.\r\n\r\n```ruby\r\nLinguist::FileBlob.new(\"vendor/plugins/foo.rb\").vendored? # => true\r\n```\r\n\r\nSee [Linguist::BlobHelper#vendored?](https://github.com/github/linguist/blob/master/lib/linguist/blob_helper.rb) and [lib/linguist/vendor.yml](https://github.com/github/linguist/blob/master/lib/linguist/vendor.yml).\r\n\r\n#### Generated file detection\r\n\r\nNot all plain text files are true source files. Generated files like minified js and compiled CoffeeScript can be detected and excluded from language stats. As an extra bonus, these files are suppressed in diffs.\r\n\r\n```ruby\r\nLinguist::FileBlob.new(\"underscore.min.js\").generated? # => true\r\n```\r\n\r\nSee [Linguist::Generated#generated?](https://github.com/github/linguist/blob/master/lib/linguist/generated.rb).\r\n\r\n## Installation\r\n\r\ngithub.com is usually running the latest version of the `github-linguist` gem that is released on [RubyGems.org](http://rubygems.org/gems/github-linguist).\r\n\r\nBut for development you are going to want to checkout out the source. To get it, clone the repo and run [Bundler](http://gembundler.com/) to install its dependencies.\r\n\r\n    git clone https://github.com/github/linguist.git\r\n    cd linguist/\r\n    bundle install\r\n\r\nTo run the tests:\r\n\r\n    bundle exec rake test\r\n\r\n## Contributing\r\n\r\nThe majority of contributions won't need to touch any Ruby code at all. The [master language list](https://github.com/github/linguist/blob/master/lib/linguist/languages.yml) is just a YAML configuration file.\r\n\r\nWe try to only add languages once they have some usage on GitHub, so please note in-the-wild usage examples in your pull request.\r\n\r\nAlmost all bug fixes or new language additions should come with some additional code samples. Just drop them under [`samples/`](https://github.com/github/linguist/tree/master/samples) in the correct subdirectory and our test suite will automatically test them. In most cases you shouldn't need to add any new assertions.\r\n\r\nTo update the `samples.json` after adding new files to [`samples/`](https://github.com/github/linguist/tree/master/samples):\r\n\r\n    bundle exec rake samples\r\n\r\n### Testing\r\n\r\nSometimes getting the tests running can be too much work, especially if you don't have much Ruby experience. It's okay: be lazy and let our build bot [Travis](http://travis-ci.org/#!/github/linguist) run the tests for you. Just open a pull request and the bot will start cranking away.\r\n\r\nHere's our current build status, which is hopefully green: [![Build Status](https://secure.travis-ci.org/github/linguist.png?branch=master)](http://travis-ci.org/github/linguist)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}